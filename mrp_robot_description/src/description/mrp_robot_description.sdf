<?xml version="1.0" ?>
<sdf version="1.8" xmlns:xacro="http://ros.org/wiki/xacro">
  <model name='mrp_robot' canonical_link='base_link'>

    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.31"/>
    <xacro:property name="base_length" value="0.42"/>
    <xacro:property name="base_height" value="0.18"/>

    <xacro:property name="wheel_radius" value="0.10"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="wheel_ygap" value="0.025"/>
    <xacro:property name="wheel_zoff" value="0.05"/>
    <xacro:property name="wheel_xoff" value="0.12"/>

    <xacro:property name="caster_xoff" value="0.14"/>

    <!-- Define some commonly used inertial properties  -->
    <xacro:macro name="box_inertia" params="m w h d">
      <inertial>
        <pose>0 0 0 ${pi/2} 0 ${pi/2}</pose>
        <mass>${m}</mass>
        <inertia>
          <ixx>${(m/12) * (h*h + d*d)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(m/12) * (w*w + d*d)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(m/12) * (w*w + h*h)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
      <inertial>
        <pose>0 0 0 ${pi/2} 0 0</pose>
        <mass>${m}</mass>
        <inertia>
          <ixx>${(m/12) * (3*r*r + h*h)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(m/12) * (3*r*r + h*h)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(m/2) * (r*r)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>


    <xacro:macro name="sphere_inertia" params="m r">
      <inertial>
        <mass>${m}</mass>
        <inertia>
          <ixx>${(2/5) * m * (r*r)}</ixx>
          <ixy>0.0</ixy>
          <ixz>0.0</ixz>
          <iyy>${(2/5) * m * (r*r)}</iyy>
          <iyz>0.0</iyz>
          <izz>${(2/5) * m * (r*r)}</izz>
        </inertia>
      </inertial>
    </xacro:macro>

    <!-- Robot Base -->
    <link name='base_link'>
      <must_be_base_link>true</must_be_base_link>
      <visual name="base_link_visual">
        <geometry>
          <box><size>
            ${base_length} ${base_width} ${base_height}
          </size></box>
        </geometry>
        <material>
          <ambient>1 0.4 0.7 1</ambient>
          <diffuse>1 0.4 0.7 1</diffuse>
        </material>
      </visual>

      <collision name="base_link_collision">
        <geometry>
          <box><size>
            ${base_length} ${base_width} ${base_height}
          </size></box>
        </geometry>
      </collision>
    </link>

    <!-- Robot Footprint -->
    <link name='base_footprint'>
      <pose relative_to="base_joint"/>
      <xacro:box_inertia m="15" w="${base_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <joint name='base_joint' type='fixed'>
      <parent>base_link</parent>
      <child>base_footprint</child>
      <pose relative_to="base_link">0.0 0.0 ${-(wheel_radius+wheel_zoff)} 0 0 0</pose>
    </joint>


    <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
      <link name="${prefix}_link">
        <pose relative_to="${prefix}_joint"/>

        <visual name="${prefix}_link_visual">
          <pose relative_to="${prefix}_link">0 0 0 ${pi/2} 0 0</pose>
          <geometry>
            <cylinder>
              <radius>${wheel_radius}</radius>
              <length>${wheel_width}</length>
            </cylinder>
          </geometry>
          <material>
            <ambient>1 0.4 0.7 1</ambient>
            <diffuse>1 0.4 0.7 1</diffuse>
          </material>
        </visual>

        <collision name="${prefix}_link_collision">
          <pose relative_to="${prefix}_link">0 0 0 ${pi/2} 0 0</pose>
          <geometry>
            <cylinder>
              <radius>${wheel_radius}</radius>
              <length>${wheel_width}</length>
            </cylinder>
          </geometry>
        </collision>

        <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}"/>
      </link>

      <joint name="${prefix}_joint" type="revolute">
        <parent>base_link</parent>
        <child>${prefix}_link</child>
        <pose relative_to="base_link">${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff} 0 0 0</pose>
        <axis>
          <xyz>0 1 0</xyz>
          <limit>
            <lower>-inf</lower>
            <upper>inf</upper>
          </limit>
        </axis>
      </joint>
    </xacro:macro>

    <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

    <link name="front_caster">
  <pose relative_to="caster_joint"/>

  <visual name="front_caster_visual">
    <geometry>
      <sphere>
        <radius>${(wheel_radius+wheel_zoff-(base_height/2))}</radius>
      </sphere>
    </geometry>
    <material>
      <ambient>1 0.4 0.7 1</ambient>
      <diffuse>1 0.4 0.7 1</diffuse>
    </material>
  </visual>

  <collision name="front_caster_collision">
    <geometry>
      <sphere>
        <radius>${(wheel_radius+wheel_zoff-(base_height/2))}</radius>
      </sphere>
    </geometry>
    <surface><friction><ode>
      <mu>0.001</mu>
      <mu2>0.001</mu2>
    </ode></friction></surface>
  </collision>

  <xacro:sphere_inertia m="0.5" r="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
</link>

    <joint name="caster_joint" type="fixed">
      <parent>base_link</parent>
      <child>front_caster</child>
      <pose relative_to="base_link">${caster_xoff} 0.0 ${-(base_height/2)} 0 0 0</pose>
    </joint>


  <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
    <!-- wheels -->
    <left_joint>drivewhl_l_joint</left_joint>
    <right_joint>drivewhl_r_joint</right_joint>

    <!-- kinematics -->
    <wheel_separation>0.4</wheel_separation>
    <wheel_radius>${wheel_radius}</wheel_radius>

    <!-- limits -->
    <max_linear_acceleration>0.1</max_linear_acceleration>

    <!-- input -->
    <topic>/demo/cmd_vel</topic>

    <!-- output -->
    <odom_topic>/demo/odom</odom_topic>
    <tf_topic>/tf</tf_topic>

    <frame_id>odom</frame_id>
    <child_frame_id>base_link</child_frame_id>
  </plugin>

  <plugin
    filename="gz-sim-joint-state-publisher-system"
    name="gz::sim::systems::JointStatePublisher">
    <topic>joint_states</topic>
  </plugin>

  <link name="lidar_link">
    <pose>0 0 ${base_height/2 + 0.05} 0 0 0</pose> <!-- Slightly above the base -->

    <visual name="lidar_visual">
      <geometry>
        <cylinder>
          <radius>0.05</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
      <material>
        <ambient>0.1 0.1 0.1 1</ambient>
        <diffuse>0.1 0.1 0.1 1</diffuse>
      </material>
    </visual>

    <collision name="lidar_collision">
      <geometry>
        <cylinder>
          <radius>0.05</radius>
          <length>0.02</length>
        </cylinder>
      </geometry>
    </collision>
 
    <sensor name="lidar_sensor" type="gpu_lidar">
      <pose>0 0 0 0 0 0</pose>
      <topic>scan</topic>
      <update_rate>1</update_rate>
      <visualize>true</visualize>
      <always_on>true</always_on>
      
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.5708</min_angle>
            <max_angle>1.5708</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>10.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>

      <frame>lidar_link</frame>
      
    </sensor>
  </link>

  <!-- Fixed joint to attach LIDAR to base -->
  <joint name="lidar_joint" type="fixed">
    <parent>base_link</parent>
    <child>lidar_link</child>
  </joint>

  </model>
</sdf>